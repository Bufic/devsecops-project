// 




pipeline {
    agent none

    environment {
        REGISTRY = 'ghcr.io'
        IMAGE_NAME = "bufic/devsecops-project"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm  // Automatically checks out the code from the Git repository
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm ci'  // Install dependencies using clean install
            }
        }

        stage('Unit Testing') {
            steps {
                sh 'npm test'  // Run unit tests
            }
        }

        stage('Static Code Analysis') {
            steps {
                sh 'npm run lint'  // Run linting for static code analysis
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def imageTag = "sha-${env.GIT_COMMIT}"  // Use the Git commit hash as the image tag
                    def fullImageName = "${REGISTRY}/${IMAGE_NAME}:${imageTag}"

                    sh """
                        docker build -t ${fullImageName} .
                        docker push ${fullImageName}
                        kind load docker-image ${fullImageName} --name tic-tac-cluster
                    """
                }
            }
        }

        stage('Update Kubernetes Deployment') {
            steps {
                script {
                    def imageTag = "sha-${env.GIT_COMMIT}"
                    def newImage = "${REGISTRY}/${IMAGE_NAME}:${imageTag}"

                    sh """
                        sed -i "s|image: ${REGISTRY}/.*|image: ${newImage}|g" kubernetes/deployment.yaml
                        echo "Updated deployment to use image: ${newImage}"
                    """
                }
            }
        }

        stage('Deploy to Kind') {
            steps {
                script {
                    sh """
                        kubectl config use-context kind-tic-tac-cluster
                        kubectl apply -f kubernetes/deployment.yaml
                    """
                }
            }
        }
    }

    post {
        always {
            sh 'docker system prune -f'  // Clean up Docker resources
        }
    }
}